# -*- coding: utf-8 -*-
"""CNN CIFAR10

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NI49mMTHyMP_rXH7CaEpABXQqjgNYiDP
"""

import tensorflow as tf
import keras

import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.layers import Input ,Dense , Conv2D , Flatten , Dropout , GlobalMaxPooling2D
from tensorflow.keras.models import Model

# load the data
cifar10 = tf.keras.datasets.cifar10

# Spltting of data
(x_train , y_train ) , (x_test, y_test) = cifar10.load_data()
x_train , x_test = x_train/255.0 , x_test/255.0

x_train.shape

x_test.shape

x_train[0].shape

# Flattening the dataset
y_train , y_test = y_train.flatten() , y_test.flatten()

y_train.shape

y_test.shape

# To find the number of classes
set(y_train)

K = len(set(y_train))
print('the number of classes' , K)

#Building the model using the Funcional API

i = Input(shape = x_train[0].shape)
x = Conv2D(32 , (3,3) , strides=2 , activation='relu')(i)
x = Conv2D(64 , (3,3) , strides=2 , activation='relu')(x)
x = Conv2D(128 , (3,3) , strides=2 , activation='relu')(x)
x = Flatten()(x)
x = Dropout(0.45)(x)
# Dense layer NN 
x = Dense(1024 , activation='relu')(x)
x = Dropout(0.2)(x)
x = Dense(K , activation='softmax')(x)

model = Model(i , x)

# compile nad fit the model

model.compile(optimizer='adam',
              loss = 'sparse_categorical_crossentropy',
              metrics = ['accuracy'],
              )
r = model.fit(x_train , y_train , validation_data=(x_test , y_test),
              epochs = 15)

# plot the loss per iteration
plt.plot(r.history['loss'] , label = 'loss')
plt.plot(r.history['val_loss'] , label = 'val_loss')
plt.legend()

# plot the accuracy per iteration

plt.plot(r.history['accuracy'] , label = 'accuracy')
plt.plot(r.history['val_accuracy'] , label = 'val_accuracy')
plt.legend()

# confusion Matrix
from sklearn.metrics import confusion_matrix
import itertools

def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='Confusion matrix',
                          cmap=plt.cm.Blues):
  """
  This function prints and plots the confusion matrix.
  Normalization can be applied by setting `normalize=True`.
  """
  if normalize:
      cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
      print("Normalized confusion matrix")
  else:
      print('Confusion matrix, without normalization')

  print(cm)

  plt.imshow(cm, interpolation='nearest', cmap=cmap)
  plt.title(title)
  plt.colorbar()
  tick_marks = np.arange(len(classes))
  plt.xticks(tick_marks, classes, rotation=45)
  plt.yticks(tick_marks, classes)

  fmt = '.2f' if normalize else 'd'
  thresh = cm.max() / 2.
  for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
      plt.text(j, i, format(cm[i, j], fmt),
               horizontalalignment="center",
               color="white" if cm[i, j] > thresh else "black")

  plt.tight_layout()
  plt.ylabel('True label')
  plt.xlabel('Predicted label')
  plt.show()


p_test = model.predict(x_test).argmax(axis=1)
cm = confusion_matrix(y_test, p_test)
plot_confusion_matrix(cm, list(range(10)))

#label Mapping

labels = '''
airplane
automobile
bird
cat
deer
dog
frog
horse
ship
truck''' .split()

labelss

# Let us show the misclassified 

misclassified_img = np.where(p_test != y_test)[0]
i = np.random.choice(misclassified_img)
plt.imshow(x_test[i], cmap = 'gray')
plt.title('True label: %s Predicted : %s' %(labels[y_test[i]] , labels[p_test[i]]));

# Let us show the misclassified 

misclassified_img = np.where(p_test != y_test)[0]
i = np.random.choice(misclassified_img)
plt.imshow(x_test[i], cmap = 'gray')
plt.title('True label: %s Predicted : %s' %(labels[y_test[i]] , labels[p_test[i]]));

# Let us show the misclassified 

misclassified_img = np.where(p_test != y_test)[0]
i = np.random.choice(misclassified_img)
plt.imshow(x_test[i], cmap = 'gray')
plt.title('True label: %s Predicted : %s' %(labels[y_test[i]] , labels[p_test[i]]));

# Let us show the misclassified 

misclassified_img = np.where(p_test != y_test)[0]
i = np.random.choice(misclassified_img)
plt.imshow(x_test[i], cmap = 'gray')
plt.title('True label: %s Predicted : %s' %(labels[y_test[i]] , labels[p_test[i]]));

# Let us show the misclassified 

misclassified_img = np.where(p_test != y_test)[0]
i = np.random.choice(misclassified_img)
plt.imshow(x_test[i], cmap = 'gray')
plt.title('True label: %s Predicted : %s' %(labels[y_test[i]] , labels[p_test[i]]));

# Let us show the misclassified 

misclassified_img = np.where(p_test != y_test)[0]
i = np.random.choice(misclassified_img)
plt.imshow(x_test[i], cmap = 'gray')
plt.title('True label: %s Predicted : %s' %(labels[y_test[i]] , labels[p_test[i]]));

# Let us show the misclassified 

misclassified_img = np.where(p_test != y_test)[0]
i = np.random.choice(misclassified_img)
plt.imshow(x_test[i], cmap = 'gray')
plt.title('True label: %s Predicted : %s' %(labels[y_test[i]] , labels[p_test[i]]));

# Let us show the misclassified 

misclassified_img = np.where(p_test != y_test)[0]
i = np.random.choice(misclassified_img)
plt.imshow(x_test[i], cmap = 'gray')
plt.title('True label: %s Predicted : %s' %(labels[y_test[i]] , labels[p_test[i]]));









